package com.rnpc.inventory.controller;

import java.io.InputStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.util.Date;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.validation.FieldError;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;

import com.rnpc.inventory.dto.ComputerDto;
import com.rnpc.inventory.entity.Computers;
import com.rnpc.inventory.repository.ComputerPartsRepository;

import jakarta.validation.Valid;

@Controller
@RequestMapping("computers")
public class ProductsController {
	
	@Autowired
	private ProductsRepository repo;

	
	@GetMapping({"","/"})
	public String showProductList(Model model) {
		List<Products> computersList = repo.findAll(Sort.by(Sort.Direction.DESC,"productId"));
		model.addAttribute("computers",computersList);
		return "computers/index";
	}
	
	
	@GetMapping("/create")
	public String showCreatePage(Model model) {
		ProductDto computerDto = new ProductDto();
		model.addAttribute("computerDto",computerDto);
		return "computers/createProduct";
	}
	
	
	@PostMapping("/create")
	public String createProduct(
	        @Valid @ModelAttribute ProductDto computerDto,
	        BindingResult result) {

	    if (computerDto.getImageFile().isEmpty()) {
	        result.addError(new FieldError("computerDto", "imageFile", "The image file is required!"));
	    }

	    if (result.hasErrors()) {
	        return "computers/createProduct";
	    }

	    //saving a file
	    MultipartFile image = computerDto.getImageFile();
	    Date createdAt = new Date();
	    String storageFileName = createdAt.getTime() + "_" + image.getOriginalFilename();

	    try {
	        String uploadDir = "public/images/";
	        Path uploadPath = Paths.get(uploadDir);

	        if (!Files.exists(uploadPath)) {
	            Files.createDirectories(uploadPath);
	        }

	        try (InputStream inputStream = image.getInputStream()) {
	            Files.copy(inputStream, uploadPath.resolve(storageFileName), StandardCopyOption.REPLACE_EXISTING);
	        } catch (Exception ex) {
	            System.out.println("Exception: " + ex.getMessage());
	        }
	    } catch (Exception ex) {
	        System.out.println("Exception: " + ex.getMessage());
	    }
	    
	    Products computers = new Products();
	    computers.setBrand(computerDto.getBrand());
	    computers.setModelName(computerDto.getModelName());
	    computers.setCategory(computerDto.getCategory());
	    computers.setStorageSize(computerDto.getStorageSize());
	    computers.setStocks(computerDto.getStocks());
	    computers.setPrice(computerDto.getPrice());
	    computers.setDescription(computerDto.getDescription());
	    computers.setCreatedAt(createdAt);
	    computers.setImageFileName(storageFileName);
	    
	    
	    repo.save(computers);
	     

	    return "redirect:/computers";
	}
	
	
	@PostMapping("/update/{id}")
	public String updateProduct(@PathVariable("id") int id, @Valid @ModelAttribute ProductDto computerDto, BindingResult result) {
		if (result.hasErrors()) {
			return "computers/editProduct";
		}

		Products product = repo.findById(id).orElseThrow(() -> new IllegalArgumentException("Invalid product Id:" + id));

		product.setBrand(computerDto.getBrand());
		product.setModelName(computerDto.getModelName());
		product.setCategory(computerDto.getCategory());
		product.setStorageSize(computerDto.getStorageSize());
		product.setStocks(computerDto.getStocks());
		product.setPrice(computerDto.getPrice());
		product.setDescription(computerDto.getDescription());

		// Handle file upload
		if (!computerDto.getImageFile().isEmpty()) {
			MultipartFile image = computerDto.getImageFile();
			String storageFileName = new Date().getTime() + "_" + image.getOriginalFilename();

			try {
				String uploadDir = "public/images/";
				Path uploadPath = Paths.get(uploadDir);

				if (!Files.exists(uploadPath)) {
					Files.createDirectories(uploadPath);
				}

				try (InputStream inputStream = image.getInputStream()) {
					Files.copy(inputStream, uploadPath.resolve(storageFileName), StandardCopyOption.REPLACE_EXISTING);
				} catch (Exception ex) {
					System.out.println("Exception: " + ex.getMessage());
				}
				
				product.setImageFileName(storageFileName);
			} catch (Exception ex) {
				System.out.println("Exception: " + ex.getMessage());
			}
		}

		repo.save(product);
		return "redirect:/computers";
	}
	
}
